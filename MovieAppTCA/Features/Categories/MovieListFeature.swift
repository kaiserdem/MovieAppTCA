import ComposableArchitecture

/// –û—Å–Ω–æ–≤–Ω–∏–π —Ä–µ–¥—é—Å–µ—Ä –¥–ª—è –µ–∫—Ä–∞–Ω—É —Å–ø–∏—Å–∫—É —Ñ—ñ–ª—å–º—ñ–≤, —Å–µ—Ä—ñ–∞–ª—ñ–≤ —Ç–∞ –ø–µ—Ä—Å–æ–Ω
struct MovieListFeature: Reducer {
    
    /// –°—Ç–∞–Ω –µ–∫—Ä–∞–Ω—É, —â–æ –º—ñ—Å—Ç–∏—Ç—å –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
    struct State: Equatable {
        var movies: [Movie] = []               // –°–ø–∏—Å–æ–∫ —Ñ—ñ–ª—å–º—ñ–≤
        var isLoading: Bool = false            // –°—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        var error: String?                     // –ü–æ–º–∏–ª–∫–∞, —è–∫—â–æ —î
        var selectedMovie: MovieThemoviedb?    // –í–∏–±—Ä–∞–Ω–∏–π —Ñ—ñ–ª—å–º –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É
    }
    
    /// –í—Å—ñ –º–æ–∂–ª–∏–≤—ñ –¥—ñ—ó, —è–∫—ñ –º–æ–∂—É—Ç—å –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞–Ω
    enum Action: Equatable {
        case onAppear                                             // –î—ñ—è –ø—Ä–∏ –ø–æ—è–≤—ñ –µ–∫—Ä–∞–Ω—É
        case moviesResponse(TaskResult<[Movie]>)                  // –í—ñ–¥–ø–æ–≤—ñ–¥—å –∑ API –¥–ª—è —Ñ—ñ–ª—å–º—ñ–≤
        case movieSelected(Movie)                                 // –í–∏–±—ñ—Ä —Ñ—ñ–ª—å–º—É
        case movieDetailsResponse(TaskResult<MovieThemoviedb>)    // –í—ñ–¥–ø–æ–≤—ñ–¥—å –∑ API –¥–ª—è –¥–µ—Ç–∞–ª–µ–π —Ñ—ñ–ª—å–º—É
        case dismissDetail                                        // –ó–∞–∫—Ä–∏—Ç—Ç—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É
    }
    
    /// –ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ API
    @Dependency(\.movieClient) var movieClient
    
    /// –û—Å–Ω–æ–≤–Ω–∏–π —Ä–µ–¥—é—Å–µ—Ä, —è–∫–∏–π –æ–±—Ä–æ–±–ª—è—î –≤—Å—ñ –¥—ñ—ó
    var body: some ReducerOf<Self> {
        Reduce { state, action in
            switch action {
            case .onAppear:
                print("üîÑ –ü–æ—á–∞—Ç–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö")
                state.isLoading = true
                
                // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∑–∞–ø–∏—Ç –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ—ñ–ª—å–º—ñ–≤
                return .run { send in
                    do {
                        let movies = try await movieClient.getPopularMovies()
                        print("‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ —Ñ—ñ–ª—å–º–∏")
                        await send(.moviesResponse(.success(movies)))
                    } catch {
                        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ñ—ñ–ª—å–º—ñ–≤: \(error)")
                        await send(.moviesResponse(.failure(error)))
                    }
                }
                
            case let .moviesResponse(.success(movies)):
                state.movies = movies
                state.isLoading = false
                return .none
                
            case let .moviesResponse(.failure(error)):
                print("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: \(error.localizedDescription)")
                state.isLoading = false
                state.error = error.localizedDescription
                return .none
                
            case let .movieSelected(movie):
                // –ü—Ä–∏ –≤–∏–±–æ—Ä—ñ —Ñ—ñ–ª—å–º—É –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –π–æ–≥–æ –¥–µ—Ç–∞–ª—ñ
                return .run { send in
                    do {
                        let details = try await movieClient.getMovieDetails(movie.id)
                        await send(.movieDetailsResponse(.success(details)))
                    } catch {
                        await send(.movieDetailsResponse(.failure(error)))
                    }
                }
                
            case let .movieDetailsResponse(.success(movie)):
                state.selectedMovie = movie
                return .none
                
            case let .movieDetailsResponse(.failure(error)):
                print("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–µ—Ç–∞–ª–µ–π: \(error.localizedDescription)")
                state.error = error.localizedDescription
                return .none
                
            case .dismissDetail:
                // –ü—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É –æ—á–∏—â–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –ø–æ–ª—è
                state.selectedMovie = nil
                return .none
            }
        }
    }
} 
